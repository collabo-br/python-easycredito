# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from easycredito.api_client import ApiClient


class ProcessApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def document(self, body, cpf, **kwargs):  # noqa: E501
        """Step 5 - Send document to analysis  # noqa: E501

        # Documents > Send a document to analysis > > Envia um documento por vez para análise.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: DocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_with_http_info(body, cpf, **kwargs)  # noqa: E501
        else:
            (data) = self.document_with_http_info(body, cpf, **kwargs)  # noqa: E501
            return data

    def document_with_http_info(self, body, cpf, **kwargs):  # noqa: E501
        """Step 5 - Send document to analysis  # noqa: E501

        # Documents > Send a document to analysis > > Envia um documento por vez para análise.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_with_http_info(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: DocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `document`")  # noqa: E501
        # verify the required parameter 'cpf' is set
        if ('cpf' not in params or
                params['cpf'] is None):
            raise ValueError("Missing the required parameter `cpf` when calling `document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in params:
            path_params['cpf'] = params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/document/{cpf}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feedback(self, cpf, **kwargs):  # noqa: E501
        """List proposals  # noqa: E501

        # List proposals > List all proposals of user > > Lista todas as proposta do usuario   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feedback(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cpf: Número do documento, apenas números (required)
        :return: FeedbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feedback_with_http_info(cpf, **kwargs)  # noqa: E501
        else:
            (data) = self.feedback_with_http_info(cpf, **kwargs)  # noqa: E501
            return data

    def feedback_with_http_info(self, cpf, **kwargs):  # noqa: E501
        """List proposals  # noqa: E501

        # List proposals > List all proposals of user > > Lista todas as proposta do usuario   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feedback_with_http_info(cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cpf: Número do documento, apenas números (required)
        :return: FeedbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cpf' is set
        if ('cpf' not in params or
                params['cpf'] is None):
            raise ValueError("Missing the required parameter `cpf` when calling `feedback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in params:
            path_params['cpf'] = params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/feedback/{cpf}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeedbackResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feedbackbyrequest(self, request_id, **kwargs):  # noqa: E501
        """List proposals by request id  # noqa: E501

        # List proposals by request id > List all proposals of user by request id > > Lista todas as proposta do usuario pelo id da request   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feedbackbyrequest(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_id: Número da request de criação das credits, apenas números (required)
        :return: FeedbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feedbackbyrequest_with_http_info(request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.feedbackbyrequest_with_http_info(request_id, **kwargs)  # noqa: E501
            return data

    def feedbackbyrequest_with_http_info(self, request_id, **kwargs):  # noqa: E501
        """List proposals by request id  # noqa: E501

        # List proposals by request id > List all proposals of user by request id > > Lista todas as proposta do usuario pelo id da request   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feedbackbyrequest_with_http_info(request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_id: Número da request de criação das credits, apenas números (required)
        :return: FeedbackResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feedbackbyrequest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `feedbackbyrequest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'request_id' in params:
            path_params['request_id'] = params['request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/feedbackbyrequest/{request_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeedbackResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def probatory(self, body, cpf, **kwargs):  # noqa: E501
        """Step 2 - Probatory Kit  # noqa: E501

        # Probatory Kit > Send data to validatetion of \"Term of use\", \"Term of SCR\" and \"Privacy Policy\" > > Envia os dados para validação do aceite do \"Termo de Uso\", \"Termo de consulta SCR\" e \"Política de privacidade\"  > https://easycredito.com.br/termos-de-uso > https://easycredito.com.br/politica-de-privacidade > https://easycredito.com.br/scr   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probatory(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProbatoryRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: ProbatoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.probatory_with_http_info(body, cpf, **kwargs)  # noqa: E501
        else:
            (data) = self.probatory_with_http_info(body, cpf, **kwargs)  # noqa: E501
            return data

    def probatory_with_http_info(self, body, cpf, **kwargs):  # noqa: E501
        """Step 2 - Probatory Kit  # noqa: E501

        # Probatory Kit > Send data to validatetion of \"Term of use\", \"Term of SCR\" and \"Privacy Policy\" > > Envia os dados para validação do aceite do \"Termo de Uso\", \"Termo de consulta SCR\" e \"Política de privacidade\"  > https://easycredito.com.br/termos-de-uso > https://easycredito.com.br/politica-de-privacidade > https://easycredito.com.br/scr   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probatory_with_http_info(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProbatoryRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: ProbatoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method probatory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `probatory`")  # noqa: E501
        # verify the required parameter 'cpf' is set
        if ('cpf' not in params or
                params['cpf'] is None):
            raise ValueError("Missing the required parameter `cpf` when calling `probatory`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in params:
            path_params['cpf'] = params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/probatory/{cpf}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProbatoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposal(self, body, cpf, **kwargs):  # noqa: E501
        """Step 4 - Create proposals  # noqa: E501

        # Create proposals > Get and valid user informations requested for create propostals > > Coleta e valida os dados necessários para a criação das propostas de acordo com os tipos de propostas selecionados   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposal(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposalRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposal_with_http_info(body, cpf, **kwargs)  # noqa: E501
        else:
            (data) = self.proposal_with_http_info(body, cpf, **kwargs)  # noqa: E501
            return data

    def proposal_with_http_info(self, body, cpf, **kwargs):  # noqa: E501
        """Step 4 - Create proposals  # noqa: E501

        # Create proposals > Get and valid user informations requested for create propostals > > Coleta e valida os dados necessários para a criação das propostas de acordo com os tipos de propostas selecionados   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposal_with_http_info(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposalRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: Success
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `proposal`")  # noqa: E501
        # verify the required parameter 'cpf' is set
        if ('cpf' not in params or
                params['cpf'] is None):
            raise ValueError("Missing the required parameter `cpf` when calling `proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in params:
            path_params['cpf'] = params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/proposal/{cpf}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Success',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def signup(self, body, **kwargs):  # noqa: E501
        """Step 1 - signup  # noqa: E501

        # Signup > Make sign up of users (can return error if user already registered) > > Realiza o cadastro de usuários (pode retornar erro caso o usuario já esteja cadastrado)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.signup(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupRequest body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.signup_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.signup_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def signup_with_http_info(self, body, **kwargs):  # noqa: E501
        """Step 1 - signup  # noqa: E501

        # Signup > Make sign up of users (can return error if user already registered) > > Realiza o cadastro de usuários (pode retornar erro caso o usuario já esteja cadastrado)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.signup_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignupRequest body: (required)
        :return: SignupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method signup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `signup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/signup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, body, cpf, **kwargs):  # noqa: E501
        """Step 3 - Update  # noqa: E501

        # Update > Get and valid user informations > > Coleta e valida os dados necessários para a criação das propostas   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: ComponentsresponsesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(body, cpf, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(body, cpf, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, body, cpf, **kwargs):  # noqa: E501
        """Step 3 - Update  # noqa: E501

        # Update > Get and valid user informations > > Coleta e valida os dados necessários para a criação das propostas   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(body, cpf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateRequest body: (required)
        :param str cpf: Número do documento, apenas números (required)
        :return: ComponentsresponsesSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cpf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501
        # verify the required parameter 'cpf' is set
        if ('cpf' not in params or
                params['cpf'] is None):
            raise ValueError("Missing the required parameter `cpf` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cpf' in params:
            path_params['cpf'] = params['cpf']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['partner_auth']  # noqa: E501

        return self.api_client.call_api(
            '/process/update/{cpf}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentsresponsesSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
