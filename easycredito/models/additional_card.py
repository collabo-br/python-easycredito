# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AdditionalCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpf': 'str',
        'full_name': 'str',
        'birthdate': 'date'
    }

    attribute_map = {
        'cpf': 'cpf',
        'full_name': 'fullName',
        'birthdate': 'birthdate'
    }

    def __init__(self, cpf=None, full_name=None, birthdate=None):  # noqa: E501
        """AdditionalCard - a model defined in Swagger"""  # noqa: E501
        self._cpf = None
        self._full_name = None
        self._birthdate = None
        self.discriminator = None
        self.cpf = cpf
        self.full_name = full_name
        self.birthdate = birthdate

    @property
    def cpf(self):
        """Gets the cpf of this AdditionalCard.  # noqa: E501

        CPF do cartão adicional  # noqa: E501

        :return: The cpf of this AdditionalCard.  # noqa: E501
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """Sets the cpf of this AdditionalCard.

        CPF do cartão adicional  # noqa: E501

        :param cpf: The cpf of this AdditionalCard.  # noqa: E501
        :type: str
        """
        if cpf is None:
            raise ValueError("Invalid value for `cpf`, must not be `None`")  # noqa: E501

        self._cpf = cpf

    @property
    def full_name(self):
        """Gets the full_name of this AdditionalCard.  # noqa: E501

        Nome do cartão adicional  # noqa: E501

        :return: The full_name of this AdditionalCard.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AdditionalCard.

        Nome do cartão adicional  # noqa: E501

        :param full_name: The full_name of this AdditionalCard.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def birthdate(self):
        """Gets the birthdate of this AdditionalCard.  # noqa: E501

        Data de nascimento do cartão adicional  # noqa: E501

        :return: The birthdate of this AdditionalCard.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this AdditionalCard.

        Data de nascimento do cartão adicional  # noqa: E501

        :param birthdate: The birthdate of this AdditionalCard.  # noqa: E501
        :type: date
        """
        if birthdate is None:
            raise ValueError("Invalid value for `birthdate`, must not be `None`")  # noqa: E501

        self._birthdate = birthdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
