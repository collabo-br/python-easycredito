# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Banks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _001 = "001"
    _003 = "003"
    _004 = "004"
    _021 = "021"
    _025 = "025"
    _033 = "033"
    _037 = "037"
    _041 = "041"
    _047 = "047"
    _069 = "069"
    _070 = "070"
    _074 = "074"
    _077 = "077"
    _084 = "084"
    _085 = "085"
    _097 = "097"
    _098 = "098"
    _099 = "099"
    _104 = "104"
    _114 = "114"
    _121 = "121"
    _133 = "133"
    _136 = "136"
    _212 = "212"
    _218 = "218"
    _237 = "237"
    _260 = "260"
    _279 = "279"
    _318 = "318"
    _341 = "341"
    _389 = "389"
    _422 = "422"
    _487 = "487"
    _610 = "610"
    _611 = "611"
    _623 = "623"
    _637 = "637"
    _643 = "643"
    _654 = "654"
    _655 = "655"
    _707 = "707"
    _748 = "748"
    _756 = "756"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """Banks - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Banks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Banks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
