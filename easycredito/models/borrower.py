# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Borrower(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mother': 'str',
        'gender': 'Gender',
        'identity': 'Identity',
        'address': 'PersonalAddress',
        'vehicle': 'Vehicle',
        'business': 'Business'
    }

    attribute_map = {
        'mother': 'mother',
        'gender': 'gender',
        'identity': 'identity',
        'address': 'address',
        'vehicle': 'vehicle',
        'business': 'business'
    }

    def __init__(self, mother=None, gender=None, identity=None, address=None, vehicle=None, business=None):  # noqa: E501
        """Borrower - a model defined in Swagger"""  # noqa: E501
        self._mother = None
        self._gender = None
        self._identity = None
        self._address = None
        self._vehicle = None
        self._business = None
        self.discriminator = None
        self.mother = mother
        self.gender = gender
        self.identity = identity
        self.address = address
        if vehicle is not None:
            self.vehicle = vehicle
        self.business = business

    @property
    def mother(self):
        """Gets the mother of this Borrower.  # noqa: E501

        Nome da Mãe  # noqa: E501

        :return: The mother of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._mother

    @mother.setter
    def mother(self, mother):
        """Sets the mother of this Borrower.

        Nome da Mãe  # noqa: E501

        :param mother: The mother of this Borrower.  # noqa: E501
        :type: str
        """
        if mother is None:
            raise ValueError("Invalid value for `mother`, must not be `None`")  # noqa: E501

        self._mother = mother

    @property
    def gender(self):
        """Gets the gender of this Borrower.  # noqa: E501


        :return: The gender of this Borrower.  # noqa: E501
        :rtype: Gender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Borrower.


        :param gender: The gender of this Borrower.  # noqa: E501
        :type: Gender
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def identity(self):
        """Gets the identity of this Borrower.  # noqa: E501


        :return: The identity of this Borrower.  # noqa: E501
        :rtype: Identity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this Borrower.


        :param identity: The identity of this Borrower.  # noqa: E501
        :type: Identity
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")  # noqa: E501

        self._identity = identity

    @property
    def address(self):
        """Gets the address of this Borrower.  # noqa: E501


        :return: The address of this Borrower.  # noqa: E501
        :rtype: PersonalAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Borrower.


        :param address: The address of this Borrower.  # noqa: E501
        :type: PersonalAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def vehicle(self):
        """Gets the vehicle of this Borrower.  # noqa: E501


        :return: The vehicle of this Borrower.  # noqa: E501
        :rtype: Vehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this Borrower.


        :param vehicle: The vehicle of this Borrower.  # noqa: E501
        :type: Vehicle
        """

        self._vehicle = vehicle

    @property
    def business(self):
        """Gets the business of this Borrower.  # noqa: E501


        :return: The business of this Borrower.  # noqa: E501
        :rtype: Business
        """
        return self._business

    @business.setter
    def business(self, business):
        """Sets the business of this Borrower.


        :param business: The business of this Borrower.  # noqa: E501
        :type: Business
        """
        if business is None:
            raise ValueError("Invalid value for `business`, must not be `None`")  # noqa: E501

        self._business = business

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Borrower, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Borrower):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
