# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Business(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occupation': 'Occupation',
        'business_profession': 'Profession',
        'business_company_phone': 'str',
        'business_type_proof_income': 'TypeProofIncome',
        'business_income': 'str',
        'business_payday': 'str',
        'address': 'Address'
    }

    attribute_map = {
        'occupation': 'occupation',
        'business_profession': 'businessProfession',
        'business_company_phone': 'businessCompanyPhone',
        'business_type_proof_income': 'businessTypeProofIncome',
        'business_income': 'businessIncome',
        'business_payday': 'businessPayday',
        'address': 'address'
    }

    def __init__(self, occupation=None, business_profession=None, business_company_phone=None, business_type_proof_income=None, business_income=None, business_payday=None, address=None):  # noqa: E501
        """Business - a model defined in Swagger"""  # noqa: E501
        self._occupation = None
        self._business_profession = None
        self._business_company_phone = None
        self._business_type_proof_income = None
        self._business_income = None
        self._business_payday = None
        self._address = None
        self.discriminator = None
        self.occupation = occupation
        self.business_profession = business_profession
        self.business_company_phone = business_company_phone
        self.business_type_proof_income = business_type_proof_income
        self.business_income = business_income
        if business_payday is not None:
            self.business_payday = business_payday
        self.address = address

    @property
    def occupation(self):
        """Gets the occupation of this Business.  # noqa: E501


        :return: The occupation of this Business.  # noqa: E501
        :rtype: Occupation
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this Business.


        :param occupation: The occupation of this Business.  # noqa: E501
        :type: Occupation
        """
        if occupation is None:
            raise ValueError("Invalid value for `occupation`, must not be `None`")  # noqa: E501

        self._occupation = occupation

    @property
    def business_profession(self):
        """Gets the business_profession of this Business.  # noqa: E501


        :return: The business_profession of this Business.  # noqa: E501
        :rtype: Profession
        """
        return self._business_profession

    @business_profession.setter
    def business_profession(self, business_profession):
        """Sets the business_profession of this Business.


        :param business_profession: The business_profession of this Business.  # noqa: E501
        :type: Profession
        """
        if business_profession is None:
            raise ValueError("Invalid value for `business_profession`, must not be `None`")  # noqa: E501

        self._business_profession = business_profession

    @property
    def business_company_phone(self):
        """Gets the business_company_phone of this Business.  # noqa: E501

        Número de telefone da empresa  # noqa: E501

        :return: The business_company_phone of this Business.  # noqa: E501
        :rtype: str
        """
        return self._business_company_phone

    @business_company_phone.setter
    def business_company_phone(self, business_company_phone):
        """Sets the business_company_phone of this Business.

        Número de telefone da empresa  # noqa: E501

        :param business_company_phone: The business_company_phone of this Business.  # noqa: E501
        :type: str
        """
        if business_company_phone is None:
            raise ValueError("Invalid value for `business_company_phone`, must not be `None`")  # noqa: E501

        self._business_company_phone = business_company_phone

    @property
    def business_type_proof_income(self):
        """Gets the business_type_proof_income of this Business.  # noqa: E501


        :return: The business_type_proof_income of this Business.  # noqa: E501
        :rtype: TypeProofIncome
        """
        return self._business_type_proof_income

    @business_type_proof_income.setter
    def business_type_proof_income(self, business_type_proof_income):
        """Sets the business_type_proof_income of this Business.


        :param business_type_proof_income: The business_type_proof_income of this Business.  # noqa: E501
        :type: TypeProofIncome
        """
        if business_type_proof_income is None:
            raise ValueError("Invalid value for `business_type_proof_income`, must not be `None`")  # noqa: E501

        self._business_type_proof_income = business_type_proof_income

    @property
    def business_income(self):
        """Gets the business_income of this Business.  # noqa: E501

        Salário  # noqa: E501

        :return: The business_income of this Business.  # noqa: E501
        :rtype: str
        """
        return self._business_income

    @business_income.setter
    def business_income(self, business_income):
        """Sets the business_income of this Business.

        Salário  # noqa: E501

        :param business_income: The business_income of this Business.  # noqa: E501
        :type: str
        """
        if business_income is None:
            raise ValueError("Invalid value for `business_income`, must not be `None`")  # noqa: E501

        self._business_income = business_income

    @property
    def business_payday(self):
        """Gets the business_payday of this Business.  # noqa: E501

        Dia em que recebe o Salário  # noqa: E501

        :return: The business_payday of this Business.  # noqa: E501
        :rtype: str
        """
        return self._business_payday

    @business_payday.setter
    def business_payday(self, business_payday):
        """Sets the business_payday of this Business.

        Dia em que recebe o Salário  # noqa: E501

        :param business_payday: The business_payday of this Business.  # noqa: E501
        :type: str
        """

        self._business_payday = business_payday

    @property
    def address(self):
        """Gets the address of this Business.  # noqa: E501


        :return: The address of this Business.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Business.


        :param address: The address of this Business.  # noqa: E501
        :type: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Business, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Business):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
