# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_landline': 'str',
        'credit_card_benefits': 'CreditCardBenefits',
        'reference': 'list[Reference]',
        'additional_card': 'list[AdditionalCard]'
    }

    attribute_map = {
        'phone_landline': 'phoneLandline',
        'credit_card_benefits': 'creditCardBenefits',
        'reference': 'reference',
        'additional_card': 'additionalCard'
    }

    def __init__(self, phone_landline=None, credit_card_benefits=None, reference=None, additional_card=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._phone_landline = None
        self._credit_card_benefits = None
        self._reference = None
        self._additional_card = None
        self.discriminator = None
        self.phone_landline = phone_landline
        self.credit_card_benefits = credit_card_benefits
        self.reference = reference
        self.additional_card = additional_card

    @property
    def phone_landline(self):
        """Gets the phone_landline of this Card.  # noqa: E501


        :return: The phone_landline of this Card.  # noqa: E501
        :rtype: str
        """
        return self._phone_landline

    @phone_landline.setter
    def phone_landline(self, phone_landline):
        """Sets the phone_landline of this Card.


        :param phone_landline: The phone_landline of this Card.  # noqa: E501
        :type: str
        """
        if phone_landline is None:
            raise ValueError("Invalid value for `phone_landline`, must not be `None`")  # noqa: E501

        self._phone_landline = phone_landline

    @property
    def credit_card_benefits(self):
        """Gets the credit_card_benefits of this Card.  # noqa: E501


        :return: The credit_card_benefits of this Card.  # noqa: E501
        :rtype: CreditCardBenefits
        """
        return self._credit_card_benefits

    @credit_card_benefits.setter
    def credit_card_benefits(self, credit_card_benefits):
        """Sets the credit_card_benefits of this Card.


        :param credit_card_benefits: The credit_card_benefits of this Card.  # noqa: E501
        :type: CreditCardBenefits
        """
        if credit_card_benefits is None:
            raise ValueError("Invalid value for `credit_card_benefits`, must not be `None`")  # noqa: E501

        self._credit_card_benefits = credit_card_benefits

    @property
    def reference(self):
        """Gets the reference of this Card.  # noqa: E501


        :return: The reference of this Card.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Card.


        :param reference: The reference of this Card.  # noqa: E501
        :type: list[Reference]
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def additional_card(self):
        """Gets the additional_card of this Card.  # noqa: E501


        :return: The additional_card of this Card.  # noqa: E501
        :rtype: list[AdditionalCard]
        """
        return self._additional_card

    @additional_card.setter
    def additional_card(self, additional_card):
        """Sets the additional_card of this Card.


        :param additional_card: The additional_card of this Card.  # noqa: E501
        :type: list[AdditionalCard]
        """
        if additional_card is None:
            raise ValueError("Invalid value for `additional_card`, must not be `None`")  # noqa: E501

        self._additional_card = additional_card

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
