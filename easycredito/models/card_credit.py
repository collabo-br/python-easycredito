# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from easycredito.models.credit import Credit


class CardCredit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_service_number': 'str',
        'type': 'ProductType',
        'product': 'str',
        'has_documents': 'bool',
        'last_status': 'CreditStatus',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'service_charge': 'float',
        'request_id': 'int',
        'international': 'bool',
        'annuity': 'float',
        'network': 'Network',
        'prepaid': 'bool',
        'digital_account': 'bool'
    }
    if hasattr(Credit, "swagger_types"):
        swagger_types.update(Credit.swagger_types)

    attribute_map = {
        'customer_service_number': 'customerServiceNumber',
        'type': 'type',
        'product': 'product',
        'has_documents': 'hasDocuments',
        'last_status': 'lastStatus',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'service_charge': 'serviceCharge',
        'request_id': 'requestId',
        'international': 'international',
        'annuity': 'annuity',
        'network': 'network',
        'prepaid': 'prepaid',
        'digital_account': 'digitalAccount'
    }
    if hasattr(Credit, "attribute_map"):
        attribute_map.update(Credit.attribute_map)

    def __init__(self, customer_service_number=None, type=None, product=None, has_documents=None, last_status=None, date_created=None, last_updated=None, service_charge=None, request_id=None, international=None, annuity=None, network=None, prepaid=None, digital_account=None, *args, **kwargs):  # noqa: E501
        """CardCredit - a model defined in Swagger"""  # noqa: E501
        self._customer_service_number = None
        self._type = None
        self._product = None
        self._has_documents = None
        self._last_status = None
        self._date_created = None
        self._last_updated = None
        self._service_charge = None
        self._request_id = None
        self._international = None
        self._annuity = None
        self._network = None
        self._prepaid = None
        self._digital_account = None
        self.discriminator = None
        self.customer_service_number = customer_service_number
        self.type = type
        self.product = product
        self.has_documents = has_documents
        self.last_status = last_status
        self.date_created = date_created
        self.last_updated = last_updated
        self.service_charge = service_charge
        self.request_id = request_id
        if international is not None:
            self.international = international
        if annuity is not None:
            self.annuity = annuity
        if network is not None:
            self.network = network
        if prepaid is not None:
            self.prepaid = prepaid
        if digital_account is not None:
            self.digital_account = digital_account
        Credit.__init__(self, *args, **kwargs)

    @property
    def customer_service_number(self):
        """Gets the customer_service_number of this CardCredit.  # noqa: E501

        Número de serviço da solicitação  # noqa: E501

        :return: The customer_service_number of this CardCredit.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_number

    @customer_service_number.setter
    def customer_service_number(self, customer_service_number):
        """Sets the customer_service_number of this CardCredit.

        Número de serviço da solicitação  # noqa: E501

        :param customer_service_number: The customer_service_number of this CardCredit.  # noqa: E501
        :type: str
        """
        if customer_service_number is None:
            raise ValueError("Invalid value for `customer_service_number`, must not be `None`")  # noqa: E501

        self._customer_service_number = customer_service_number

    @property
    def type(self):
        """Gets the type of this CardCredit.  # noqa: E501


        :return: The type of this CardCredit.  # noqa: E501
        :rtype: ProductType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CardCredit.


        :param type: The type of this CardCredit.  # noqa: E501
        :type: ProductType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def product(self):
        """Gets the product of this CardCredit.  # noqa: E501

        Nome do produto  # noqa: E501

        :return: The product of this CardCredit.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CardCredit.

        Nome do produto  # noqa: E501

        :param product: The product of this CardCredit.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def has_documents(self):
        """Gets the has_documents of this CardCredit.  # noqa: E501

        Informa se a proposta já possui os documentos  # noqa: E501

        :return: The has_documents of this CardCredit.  # noqa: E501
        :rtype: bool
        """
        return self._has_documents

    @has_documents.setter
    def has_documents(self, has_documents):
        """Sets the has_documents of this CardCredit.

        Informa se a proposta já possui os documentos  # noqa: E501

        :param has_documents: The has_documents of this CardCredit.  # noqa: E501
        :type: bool
        """
        if has_documents is None:
            raise ValueError("Invalid value for `has_documents`, must not be `None`")  # noqa: E501

        self._has_documents = has_documents

    @property
    def last_status(self):
        """Gets the last_status of this CardCredit.  # noqa: E501


        :return: The last_status of this CardCredit.  # noqa: E501
        :rtype: CreditStatus
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this CardCredit.


        :param last_status: The last_status of this CardCredit.  # noqa: E501
        :type: CreditStatus
        """
        if last_status is None:
            raise ValueError("Invalid value for `last_status`, must not be `None`")  # noqa: E501

        self._last_status = last_status

    @property
    def date_created(self):
        """Gets the date_created of this CardCredit.  # noqa: E501

        Data da criação da proposta  # noqa: E501

        :return: The date_created of this CardCredit.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CardCredit.

        Data da criação da proposta  # noqa: E501

        :param date_created: The date_created of this CardCredit.  # noqa: E501
        :type: datetime
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this CardCredit.  # noqa: E501

        Data da última atualização da proposta  # noqa: E501

        :return: The last_updated of this CardCredit.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CardCredit.

        Data da última atualização da proposta  # noqa: E501

        :param last_updated: The last_updated of this CardCredit.  # noqa: E501
        :type: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def service_charge(self):
        """Gets the service_charge of this CardCredit.  # noqa: E501

        Taxa de serviço  # noqa: E501

        :return: The service_charge of this CardCredit.  # noqa: E501
        :rtype: float
        """
        return self._service_charge

    @service_charge.setter
    def service_charge(self, service_charge):
        """Sets the service_charge of this CardCredit.

        Taxa de serviço  # noqa: E501

        :param service_charge: The service_charge of this CardCredit.  # noqa: E501
        :type: float
        """
        if service_charge is None:
            raise ValueError("Invalid value for `service_charge`, must not be `None`")  # noqa: E501

        self._service_charge = service_charge

    @property
    def request_id(self):
        """Gets the request_id of this CardCredit.  # noqa: E501

        ID da solicitação de criação das credits. Usado para identificar as credits do mesmo cliente.  # noqa: E501

        :return: The request_id of this CardCredit.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CardCredit.

        ID da solicitação de criação das credits. Usado para identificar as credits do mesmo cliente.  # noqa: E501

        :param request_id: The request_id of this CardCredit.  # noqa: E501
        :type: int
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def international(self):
        """Gets the international of this CardCredit.  # noqa: E501

        Internacional  # noqa: E501

        :return: The international of this CardCredit.  # noqa: E501
        :rtype: bool
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this CardCredit.

        Internacional  # noqa: E501

        :param international: The international of this CardCredit.  # noqa: E501
        :type: bool
        """

        self._international = international

    @property
    def annuity(self):
        """Gets the annuity of this CardCredit.  # noqa: E501

        Valor da anuidade  # noqa: E501

        :return: The annuity of this CardCredit.  # noqa: E501
        :rtype: float
        """
        return self._annuity

    @annuity.setter
    def annuity(self, annuity):
        """Sets the annuity of this CardCredit.

        Valor da anuidade  # noqa: E501

        :param annuity: The annuity of this CardCredit.  # noqa: E501
        :type: float
        """

        self._annuity = annuity

    @property
    def network(self):
        """Gets the network of this CardCredit.  # noqa: E501


        :return: The network of this CardCredit.  # noqa: E501
        :rtype: Network
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CardCredit.


        :param network: The network of this CardCredit.  # noqa: E501
        :type: Network
        """

        self._network = network

    @property
    def prepaid(self):
        """Gets the prepaid of this CardCredit.  # noqa: E501

        Cartão pré pago  # noqa: E501

        :return: The prepaid of this CardCredit.  # noqa: E501
        :rtype: bool
        """
        return self._prepaid

    @prepaid.setter
    def prepaid(self, prepaid):
        """Sets the prepaid of this CardCredit.

        Cartão pré pago  # noqa: E501

        :param prepaid: The prepaid of this CardCredit.  # noqa: E501
        :type: bool
        """

        self._prepaid = prepaid

    @property
    def digital_account(self):
        """Gets the digital_account of this CardCredit.  # noqa: E501

        Conta Digital  # noqa: E501

        :return: The digital_account of this CardCredit.  # noqa: E501
        :rtype: bool
        """
        return self._digital_account

    @digital_account.setter
    def digital_account(self, digital_account):
        """Sets the digital_account of this CardCredit.

        Conta Digital  # noqa: E501

        :param digital_account: The digital_account of this CardCredit.  # noqa: E501
        :type: bool
        """

        self._digital_account = digital_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardCredit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardCredit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
