# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DocumentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'DocumentType',
        'mime_type': 'MimeType',
        'name': 'str',
        'base64': 'str'
    }

    attribute_map = {
        'type': 'type',
        'mime_type': 'mimeType',
        'name': 'name',
        'base64': 'base64'
    }

    def __init__(self, type=None, mime_type=None, name=None, base64=None):  # noqa: E501
        """DocumentRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._mime_type = None
        self._name = None
        self._base64 = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if mime_type is not None:
            self.mime_type = mime_type
        if name is not None:
            self.name = name
        if base64 is not None:
            self.base64 = base64

    @property
    def type(self):
        """Gets the type of this DocumentRequest.  # noqa: E501


        :return: The type of this DocumentRequest.  # noqa: E501
        :rtype: DocumentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentRequest.


        :param type: The type of this DocumentRequest.  # noqa: E501
        :type: DocumentType
        """

        self._type = type

    @property
    def mime_type(self):
        """Gets the mime_type of this DocumentRequest.  # noqa: E501


        :return: The mime_type of this DocumentRequest.  # noqa: E501
        :rtype: MimeType
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DocumentRequest.


        :param mime_type: The mime_type of this DocumentRequest.  # noqa: E501
        :type: MimeType
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this DocumentRequest.  # noqa: E501

        Nome do arquivo  # noqa: E501

        :return: The name of this DocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentRequest.

        Nome do arquivo  # noqa: E501

        :param name: The name of this DocumentRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def base64(self):
        """Gets the base64 of this DocumentRequest.  # noqa: E501

        Arquivo encodado em base64  # noqa: E501

        :return: The base64 of this DocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64):
        """Sets the base64 of this DocumentRequest.

        Arquivo encodado em base64  # noqa: E501

        :param base64: The base64 of this DocumentRequest.  # noqa: E501
        :type: str
        """

        self._base64 = base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
