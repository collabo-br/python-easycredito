# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Identity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_type': 'IdentityType',
        'identity_number': 'str',
        'identity_issuer': 'IdentityIssuer',
        'identity_state': 'State',
        'identity_issuing_date': 'date'
    }

    attribute_map = {
        'identity_type': 'identityType',
        'identity_number': 'identityNumber',
        'identity_issuer': 'identityIssuer',
        'identity_state': 'identityState',
        'identity_issuing_date': 'identityIssuingDate'
    }

    def __init__(self, identity_type=None, identity_number=None, identity_issuer=None, identity_state=None, identity_issuing_date=None):  # noqa: E501
        """Identity - a model defined in Swagger"""  # noqa: E501
        self._identity_type = None
        self._identity_number = None
        self._identity_issuer = None
        self._identity_state = None
        self._identity_issuing_date = None
        self.discriminator = None
        self.identity_type = identity_type
        self.identity_number = identity_number
        self.identity_issuer = identity_issuer
        self.identity_state = identity_state
        self.identity_issuing_date = identity_issuing_date

    @property
    def identity_type(self):
        """Gets the identity_type of this Identity.  # noqa: E501


        :return: The identity_type of this Identity.  # noqa: E501
        :rtype: IdentityType
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this Identity.


        :param identity_type: The identity_type of this Identity.  # noqa: E501
        :type: IdentityType
        """
        if identity_type is None:
            raise ValueError("Invalid value for `identity_type`, must not be `None`")  # noqa: E501

        self._identity_type = identity_type

    @property
    def identity_number(self):
        """Gets the identity_number of this Identity.  # noqa: E501

        Número da identidade  # noqa: E501

        :return: The identity_number of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this Identity.

        Número da identidade  # noqa: E501

        :param identity_number: The identity_number of this Identity.  # noqa: E501
        :type: str
        """
        if identity_number is None:
            raise ValueError("Invalid value for `identity_number`, must not be `None`")  # noqa: E501

        self._identity_number = identity_number

    @property
    def identity_issuer(self):
        """Gets the identity_issuer of this Identity.  # noqa: E501


        :return: The identity_issuer of this Identity.  # noqa: E501
        :rtype: IdentityIssuer
        """
        return self._identity_issuer

    @identity_issuer.setter
    def identity_issuer(self, identity_issuer):
        """Sets the identity_issuer of this Identity.


        :param identity_issuer: The identity_issuer of this Identity.  # noqa: E501
        :type: IdentityIssuer
        """
        if identity_issuer is None:
            raise ValueError("Invalid value for `identity_issuer`, must not be `None`")  # noqa: E501

        self._identity_issuer = identity_issuer

    @property
    def identity_state(self):
        """Gets the identity_state of this Identity.  # noqa: E501


        :return: The identity_state of this Identity.  # noqa: E501
        :rtype: State
        """
        return self._identity_state

    @identity_state.setter
    def identity_state(self, identity_state):
        """Sets the identity_state of this Identity.


        :param identity_state: The identity_state of this Identity.  # noqa: E501
        :type: State
        """
        if identity_state is None:
            raise ValueError("Invalid value for `identity_state`, must not be `None`")  # noqa: E501

        self._identity_state = identity_state

    @property
    def identity_issuing_date(self):
        """Gets the identity_issuing_date of this Identity.  # noqa: E501

        Data de Emissão  # noqa: E501

        :return: The identity_issuing_date of this Identity.  # noqa: E501
        :rtype: date
        """
        return self._identity_issuing_date

    @identity_issuing_date.setter
    def identity_issuing_date(self, identity_issuing_date):
        """Sets the identity_issuing_date of this Identity.

        Data de Emissão  # noqa: E501

        :param identity_issuing_date: The identity_issuing_date of this Identity.  # noqa: E501
        :type: date
        """
        if identity_issuing_date is None:
            raise ValueError("Invalid value for `identity_issuing_date`, must not be `None`")  # noqa: E501

        self._identity_issuing_date = identity_issuing_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Identity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
