# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IdentityIssuer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    SSP = "SSP"
    DETRAN = "DETRAN"
    CONS_REG_ECONOMIA = "CONS_REG_ECONOMIA"
    MIN_EXERCITO = "MIN_EXERCITO"
    OAB = "OAB"
    CREA = "CREA"
    SJS = "SJS"
    CTPS = "CTPS"
    CREME = "CREME"
    MINEX = "MINEX"
    CRM = "CRM"
    SJTC = "SJTC"
    MAER = "MAER"
    DPF = "DPF"
    RBF = "RBF"
    IML = "IML"
    CPROF = "CPROF"
    CRO = "CRO"
    CRC = "CRC"
    DPMAF = "DPMAF"
    ME = "ME"
    BM = "BM"
    AERON = "AERON"
    SJT = "SJT"
    COREN = "COREN"
    DETRA = "DETRA"
    EXERC = "EXERC"
    SSI = "SSI"
    MINISTERIO_DA_MARINHA = "MINISTERIO_DA_MARINHA"
    CRA_CONSELHO_ADMINISTRATIVO = "CRA_CONSELHO_ADMINISTRATIVO"
    INSTITUTO_FELIX_PACHECO = "INSTITUTO_FELIX_PACHECO"
    INST_NAC_PROPRIEDADE_INDUSTRIA = "INST_NAC_PROPRIEDADE_INDUSTRIA"
    MINISTERIO_DA_FAZENDA = "MINISTERIO_DA_FAZENDA"
    TRIBUNAL_REGIONAL_DO_TRABALHO = "TRIBUNAL_REGIONAL_DO_TRABALHO"
    CONSELHO_REGIONAL_PSICOLOGIA = "CONSELHO_REGIONAL_PSICOLOGIA"
    POLICIA_MILITAR = "POLICIA_MILITAR"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """IdentityIssuer - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityIssuer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityIssuer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
