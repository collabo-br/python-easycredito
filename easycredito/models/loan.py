# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Loan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nationality': 'Nationality',
        'hometown_state': 'State',
        'hometown': 'City',
        'education': 'Education',
        'relationship_status': 'RelationshipStatus',
        'loan_objectives': 'LoanObjectives',
        'bank': 'Bank',
        'address': 'LoanAddress',
        'business': 'LoanBusiness'
    }

    attribute_map = {
        'nationality': 'nationality',
        'hometown_state': 'hometownState',
        'hometown': 'hometown',
        'education': 'education',
        'relationship_status': 'relationshipStatus',
        'loan_objectives': 'loanObjectives',
        'bank': 'bank',
        'address': 'address',
        'business': 'business'
    }

    def __init__(self, nationality=None, hometown_state=None, hometown=None, education=None, relationship_status=None, loan_objectives=None, bank=None, address=None, business=None):  # noqa: E501
        """Loan - a model defined in Swagger"""  # noqa: E501
        self._nationality = None
        self._hometown_state = None
        self._hometown = None
        self._education = None
        self._relationship_status = None
        self._loan_objectives = None
        self._bank = None
        self._address = None
        self._business = None
        self.discriminator = None
        self.nationality = nationality
        self.hometown_state = hometown_state
        self.hometown = hometown
        self.education = education
        self.relationship_status = relationship_status
        self.loan_objectives = loan_objectives
        self.bank = bank
        self.address = address
        self.business = business

    @property
    def nationality(self):
        """Gets the nationality of this Loan.  # noqa: E501


        :return: The nationality of this Loan.  # noqa: E501
        :rtype: Nationality
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Loan.


        :param nationality: The nationality of this Loan.  # noqa: E501
        :type: Nationality
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501

        self._nationality = nationality

    @property
    def hometown_state(self):
        """Gets the hometown_state of this Loan.  # noqa: E501


        :return: The hometown_state of this Loan.  # noqa: E501
        :rtype: State
        """
        return self._hometown_state

    @hometown_state.setter
    def hometown_state(self, hometown_state):
        """Sets the hometown_state of this Loan.


        :param hometown_state: The hometown_state of this Loan.  # noqa: E501
        :type: State
        """
        if hometown_state is None:
            raise ValueError("Invalid value for `hometown_state`, must not be `None`")  # noqa: E501

        self._hometown_state = hometown_state

    @property
    def hometown(self):
        """Gets the hometown of this Loan.  # noqa: E501


        :return: The hometown of this Loan.  # noqa: E501
        :rtype: City
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Loan.


        :param hometown: The hometown of this Loan.  # noqa: E501
        :type: City
        """
        if hometown is None:
            raise ValueError("Invalid value for `hometown`, must not be `None`")  # noqa: E501

        self._hometown = hometown

    @property
    def education(self):
        """Gets the education of this Loan.  # noqa: E501


        :return: The education of this Loan.  # noqa: E501
        :rtype: Education
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this Loan.


        :param education: The education of this Loan.  # noqa: E501
        :type: Education
        """
        if education is None:
            raise ValueError("Invalid value for `education`, must not be `None`")  # noqa: E501

        self._education = education

    @property
    def relationship_status(self):
        """Gets the relationship_status of this Loan.  # noqa: E501


        :return: The relationship_status of this Loan.  # noqa: E501
        :rtype: RelationshipStatus
        """
        return self._relationship_status

    @relationship_status.setter
    def relationship_status(self, relationship_status):
        """Sets the relationship_status of this Loan.


        :param relationship_status: The relationship_status of this Loan.  # noqa: E501
        :type: RelationshipStatus
        """
        if relationship_status is None:
            raise ValueError("Invalid value for `relationship_status`, must not be `None`")  # noqa: E501

        self._relationship_status = relationship_status

    @property
    def loan_objectives(self):
        """Gets the loan_objectives of this Loan.  # noqa: E501


        :return: The loan_objectives of this Loan.  # noqa: E501
        :rtype: LoanObjectives
        """
        return self._loan_objectives

    @loan_objectives.setter
    def loan_objectives(self, loan_objectives):
        """Sets the loan_objectives of this Loan.


        :param loan_objectives: The loan_objectives of this Loan.  # noqa: E501
        :type: LoanObjectives
        """
        if loan_objectives is None:
            raise ValueError("Invalid value for `loan_objectives`, must not be `None`")  # noqa: E501

        self._loan_objectives = loan_objectives

    @property
    def bank(self):
        """Gets the bank of this Loan.  # noqa: E501


        :return: The bank of this Loan.  # noqa: E501
        :rtype: Bank
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this Loan.


        :param bank: The bank of this Loan.  # noqa: E501
        :type: Bank
        """
        if bank is None:
            raise ValueError("Invalid value for `bank`, must not be `None`")  # noqa: E501

        self._bank = bank

    @property
    def address(self):
        """Gets the address of this Loan.  # noqa: E501


        :return: The address of this Loan.  # noqa: E501
        :rtype: LoanAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Loan.


        :param address: The address of this Loan.  # noqa: E501
        :type: LoanAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def business(self):
        """Gets the business of this Loan.  # noqa: E501


        :return: The business of this Loan.  # noqa: E501
        :rtype: LoanBusiness
        """
        return self._business

    @business.setter
    def business(self, business):
        """Sets the business of this Loan.


        :param business: The business of this Loan.  # noqa: E501
        :type: LoanBusiness
        """
        if business is None:
            raise ValueError("Invalid value for `business`, must not be `None`")  # noqa: E501

        self._business = business

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Loan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Loan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
