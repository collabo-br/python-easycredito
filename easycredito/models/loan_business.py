# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LoanBusiness(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_company_name': 'str',
        'business_empregador': 'BusinessEmpregador',
        'business_lotacao': 'str',
        'business_orgao': 'str',
        'business_benefit_number': 'str',
        'business_benefit_type': 'str',
        'business_benefit_category': 'BusinessBenefitCategory'
    }

    attribute_map = {
        'business_company_name': 'businessCompanyName',
        'business_empregador': 'businessEmpregador',
        'business_lotacao': 'businessLotacao',
        'business_orgao': 'businessOrgao',
        'business_benefit_number': 'businessBenefitNumber',
        'business_benefit_type': 'businessBenefitType',
        'business_benefit_category': 'businessBenefitCategory'
    }

    def __init__(self, business_company_name=None, business_empregador=None, business_lotacao=None, business_orgao=None, business_benefit_number=None, business_benefit_type=None, business_benefit_category=None):  # noqa: E501
        """LoanBusiness - a model defined in Swagger"""  # noqa: E501
        self._business_company_name = None
        self._business_empregador = None
        self._business_lotacao = None
        self._business_orgao = None
        self._business_benefit_number = None
        self._business_benefit_type = None
        self._business_benefit_category = None
        self.discriminator = None
        self.business_company_name = business_company_name
        if business_empregador is not None:
            self.business_empregador = business_empregador
        if business_lotacao is not None:
            self.business_lotacao = business_lotacao
        if business_orgao is not None:
            self.business_orgao = business_orgao
        if business_benefit_number is not None:
            self.business_benefit_number = business_benefit_number
        if business_benefit_type is not None:
            self.business_benefit_type = business_benefit_type
        if business_benefit_category is not None:
            self.business_benefit_category = business_benefit_category

    @property
    def business_company_name(self):
        """Gets the business_company_name of this LoanBusiness.  # noqa: E501

        Nome da empresa  # noqa: E501

        :return: The business_company_name of this LoanBusiness.  # noqa: E501
        :rtype: str
        """
        return self._business_company_name

    @business_company_name.setter
    def business_company_name(self, business_company_name):
        """Sets the business_company_name of this LoanBusiness.

        Nome da empresa  # noqa: E501

        :param business_company_name: The business_company_name of this LoanBusiness.  # noqa: E501
        :type: str
        """
        if business_company_name is None:
            raise ValueError("Invalid value for `business_company_name`, must not be `None`")  # noqa: E501

        self._business_company_name = business_company_name

    @property
    def business_empregador(self):
        """Gets the business_empregador of this LoanBusiness.  # noqa: E501


        :return: The business_empregador of this LoanBusiness.  # noqa: E501
        :rtype: BusinessEmpregador
        """
        return self._business_empregador

    @business_empregador.setter
    def business_empregador(self, business_empregador):
        """Sets the business_empregador of this LoanBusiness.


        :param business_empregador: The business_empregador of this LoanBusiness.  # noqa: E501
        :type: BusinessEmpregador
        """

        self._business_empregador = business_empregador

    @property
    def business_lotacao(self):
        """Gets the business_lotacao of this LoanBusiness.  # noqa: E501

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA' || ocupation == 'FUNCIONARIO_PUBLICO')  # noqa: E501

        :return: The business_lotacao of this LoanBusiness.  # noqa: E501
        :rtype: str
        """
        return self._business_lotacao

    @business_lotacao.setter
    def business_lotacao(self, business_lotacao):
        """Sets the business_lotacao of this LoanBusiness.

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA' || ocupation == 'FUNCIONARIO_PUBLICO')  # noqa: E501

        :param business_lotacao: The business_lotacao of this LoanBusiness.  # noqa: E501
        :type: str
        """

        self._business_lotacao = business_lotacao

    @property
    def business_orgao(self):
        """Gets the business_orgao of this LoanBusiness.  # noqa: E501

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA' || ocupation == 'FUNCIONARIO_PUBLICO')  # noqa: E501

        :return: The business_orgao of this LoanBusiness.  # noqa: E501
        :rtype: str
        """
        return self._business_orgao

    @business_orgao.setter
    def business_orgao(self, business_orgao):
        """Sets the business_orgao of this LoanBusiness.

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA' || ocupation == 'FUNCIONARIO_PUBLICO')  # noqa: E501

        :param business_orgao: The business_orgao of this LoanBusiness.  # noqa: E501
        :type: str
        """

        self._business_orgao = business_orgao

    @property
    def business_benefit_number(self):
        """Gets the business_benefit_number of this LoanBusiness.  # noqa: E501

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA')  # noqa: E501

        :return: The business_benefit_number of this LoanBusiness.  # noqa: E501
        :rtype: str
        """
        return self._business_benefit_number

    @business_benefit_number.setter
    def business_benefit_number(self, business_benefit_number):
        """Sets the business_benefit_number of this LoanBusiness.

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA')  # noqa: E501

        :param business_benefit_number: The business_benefit_number of this LoanBusiness.  # noqa: E501
        :type: str
        """

        self._business_benefit_number = business_benefit_number

    @property
    def business_benefit_type(self):
        """Gets the business_benefit_type of this LoanBusiness.  # noqa: E501

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA')  # noqa: E501

        :return: The business_benefit_type of this LoanBusiness.  # noqa: E501
        :rtype: str
        """
        return self._business_benefit_type

    @business_benefit_type.setter
    def business_benefit_type(self, business_benefit_type):
        """Sets the business_benefit_type of this LoanBusiness.

        requerido se (ocupation == 'APOSENTADO_PENSIONISTA')  # noqa: E501

        :param business_benefit_type: The business_benefit_type of this LoanBusiness.  # noqa: E501
        :type: str
        """

        self._business_benefit_type = business_benefit_type

    @property
    def business_benefit_category(self):
        """Gets the business_benefit_category of this LoanBusiness.  # noqa: E501


        :return: The business_benefit_category of this LoanBusiness.  # noqa: E501
        :rtype: BusinessBenefitCategory
        """
        return self._business_benefit_category

    @business_benefit_category.setter
    def business_benefit_category(self, business_benefit_category):
        """Sets the business_benefit_category of this LoanBusiness.


        :param business_benefit_category: The business_benefit_category of this LoanBusiness.  # noqa: E501
        :type: BusinessBenefitCategory
        """

        self._business_benefit_category = business_benefit_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanBusiness, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanBusiness):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
