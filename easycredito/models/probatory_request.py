# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProbatoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latitude': 'float',
        'longitude': 'float',
        'occurrence_date': 'datetime',
        'user_agent': 'str',
        'ip': 'str',
        'mac': 'str'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'occurrence_date': 'occurrenceDate',
        'user_agent': 'userAgent',
        'ip': 'ip',
        'mac': 'mac'
    }

    def __init__(self, latitude=None, longitude=None, occurrence_date=None, user_agent=None, ip=None, mac=None):  # noqa: E501
        """ProbatoryRequest - a model defined in Swagger"""  # noqa: E501
        self._latitude = None
        self._longitude = None
        self._occurrence_date = None
        self._user_agent = None
        self._ip = None
        self._mac = None
        self.discriminator = None
        self.latitude = latitude
        self.longitude = longitude
        self.occurrence_date = occurrence_date
        self.user_agent = user_agent
        self.ip = ip
        if mac is not None:
            self.mac = mac

    @property
    def latitude(self):
        """Gets the latitude of this ProbatoryRequest.  # noqa: E501

        Latitude  # noqa: E501

        :return: The latitude of this ProbatoryRequest.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ProbatoryRequest.

        Latitude  # noqa: E501

        :param latitude: The latitude of this ProbatoryRequest.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ProbatoryRequest.  # noqa: E501

        Longitude  # noqa: E501

        :return: The longitude of this ProbatoryRequest.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ProbatoryRequest.

        Longitude  # noqa: E501

        :param longitude: The longitude of this ProbatoryRequest.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def occurrence_date(self):
        """Gets the occurrence_date of this ProbatoryRequest.  # noqa: E501

        Data da ocorrência, formato (aaaa-MM-dd'T'HH:mm:ss.SSSz)  # noqa: E501

        :return: The occurrence_date of this ProbatoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._occurrence_date

    @occurrence_date.setter
    def occurrence_date(self, occurrence_date):
        """Sets the occurrence_date of this ProbatoryRequest.

        Data da ocorrência, formato (aaaa-MM-dd'T'HH:mm:ss.SSSz)  # noqa: E501

        :param occurrence_date: The occurrence_date of this ProbatoryRequest.  # noqa: E501
        :type: datetime
        """
        if occurrence_date is None:
            raise ValueError("Invalid value for `occurrence_date`, must not be `None`")  # noqa: E501

        self._occurrence_date = occurrence_date

    @property
    def user_agent(self):
        """Gets the user_agent of this ProbatoryRequest.  # noqa: E501

        UserAgent do navegador do usuário  # noqa: E501

        :return: The user_agent of this ProbatoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ProbatoryRequest.

        UserAgent do navegador do usuário  # noqa: E501

        :param user_agent: The user_agent of this ProbatoryRequest.  # noqa: E501
        :type: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")  # noqa: E501

        self._user_agent = user_agent

    @property
    def ip(self):
        """Gets the ip of this ProbatoryRequest.  # noqa: E501

        IP do usuário  # noqa: E501

        :return: The ip of this ProbatoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ProbatoryRequest.

        IP do usuário  # noqa: E501

        :param ip: The ip of this ProbatoryRequest.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def mac(self):
        """Gets the mac of this ProbatoryRequest.  # noqa: E501

        MAC do usuário  # noqa: E501

        :return: The mac of this ProbatoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this ProbatoryRequest.

        MAC do usuário  # noqa: E501

        :param mac: The mac of this ProbatoryRequest.  # noqa: E501
        :type: str
        """

        self._mac = mac

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProbatoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProbatoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
