# coding: utf-8

"""
    Easyc External

    API para processo externo  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tecnologia@easycredito.me
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'borrower': 'Borrower',
        'loan': 'Loan',
        'card': 'Card',
        'products': 'list[ProductType]'
    }

    attribute_map = {
        'borrower': 'borrower',
        'loan': 'loan',
        'card': 'card',
        'products': 'products'
    }

    def __init__(self, borrower=None, loan=None, card=None, products=None):  # noqa: E501
        """UpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._borrower = None
        self._loan = None
        self._card = None
        self._products = None
        self.discriminator = None
        if borrower is not None:
            self.borrower = borrower
        if loan is not None:
            self.loan = loan
        if card is not None:
            self.card = card
        if products is not None:
            self.products = products

    @property
    def borrower(self):
        """Gets the borrower of this UpdateRequest.  # noqa: E501


        :return: The borrower of this UpdateRequest.  # noqa: E501
        :rtype: Borrower
        """
        return self._borrower

    @borrower.setter
    def borrower(self, borrower):
        """Sets the borrower of this UpdateRequest.


        :param borrower: The borrower of this UpdateRequest.  # noqa: E501
        :type: Borrower
        """

        self._borrower = borrower

    @property
    def loan(self):
        """Gets the loan of this UpdateRequest.  # noqa: E501


        :return: The loan of this UpdateRequest.  # noqa: E501
        :rtype: Loan
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this UpdateRequest.


        :param loan: The loan of this UpdateRequest.  # noqa: E501
        :type: Loan
        """

        self._loan = loan

    @property
    def card(self):
        """Gets the card of this UpdateRequest.  # noqa: E501


        :return: The card of this UpdateRequest.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this UpdateRequest.


        :param card: The card of this UpdateRequest.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def products(self):
        """Gets the products of this UpdateRequest.  # noqa: E501


        :return: The products of this UpdateRequest.  # noqa: E501
        :rtype: list[ProductType]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this UpdateRequest.


        :param products: The products of this UpdateRequest.  # noqa: E501
        :type: list[ProductType]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
